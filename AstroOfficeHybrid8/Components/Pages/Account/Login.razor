@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @layout AccountLayout *@



@* <div class="login-page">
    <img src="images/loader-4.gif" class="astroOffice-logo-image mb-3" />

    <div class="login-box card-frame">
        <div style="position:relative;z-index:999!important;">
            <div class="login-logo">
                <h3>Login </h3>
            </div>
            <div class="card">
                <div class="card-body login-card-body">
                    <p class="login-box-msg">Sign in to start your session</p>
                    <EditForm Model="LoginModel" OnInvalidSubmit="OnInvalidSubmit" OnValidSubmit="OnValidSubmitAsync">
                        <DataAnnotationsValidator />

                        <div class="input-group mb-4">
                            <InputText @bind-Value="LoginModel!.UserName" class="form-control" placeholder="User Name" />
                            <i class="fa fa-user"></i>
                            <ValidationMessage For="() => LoginModel!.UserName" />

                        </div>
                        <div class="input-group mb-4">
                            <InputText type="@(PasswordIsClicked ? "text" : "password")" @bind-Value="LoginModel!.Password" class="form-control" placeholder="Password" />
                            <i class="fas @(PasswordIsClicked ? "fa-eye-slash" : "fa-eye")" @onclick="()=>{PasswordIsClicked = !PasswordIsClicked; }"></i>
                            <ValidationMessage For="() => LoginModel.Password" />
                        </div>
                        <div class="row down-form">
                            <div class="col-6">
                                <InputCheckbox id="ChkRememberMe" @bind-Value="LoginModel!.RememberMe" />
                                <label for="ChkRememberMe">
                                    Remember Me
                                </label>
                            </div>
                            <div class="col-6 text-right">
                                <NavLink href="/forgotpass" class="forgot-link">Forgot Password ?</NavLink>
                            </div>
                            <div class="col-12 mt-3">
                                <button type="submit" class="btn btn-custom btn-block">Sign In</button>
                                <NavLink class="btn btn-custom btn-custom-outline mt-2 btn-block" href="/login-with-mobile">Login with OTP</NavLink>
                            </div>
                        </div>
                    </EditForm>
                    <div class="text-center">
                        <p class="mb-0 mt-3 sign-up "> Don't have an account?  <NavLink class="forgot-link" href="/register"><u>Sign Up</u></NavLink> </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
 *@

@*  <body class="">
    <div class="container-fluid">
      <div class="row vertical-center">
          <form class="col-xs-8 col-xs-offset-2  col-sm-6 col-sm-offset-3 col-md-4 col-sm-offset-4 col-lg-2 col-lg-offset-5">
            <h1>Sign In</h1>
            <p>
              <label class="sr-only" for="">Email Address</label>
              <input class="form-control" type="email" placeholder="Email Address" required autofocus>
            </p>
            <p>
              <label class="sr-only" for="">Password</label>
              <input class="form-control" type="email" placeholder="Password" required>
            </p>
            <p class="checkbox">
              <label><input type="checkbox">Remember Me</label>
            </p>
            <button class="btn btn-primary btn-block" type="sumbit">Sign In</button>
          </form>
      </div>
    </div> *@



 @using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<div class="container-fluid">
    <div class="row vertical-center">
        <MudGrid Justify="Justify.Center">

            <MudItem xs="12" sm="7">
                <MudPaper Class="d-flex align-center justify-center mud-width-full">

                    <MudImage Src="images/loader-4.gif" Alt="Mony the dog" Class="rounded-lg" Height="100" />

                </MudPaper>

                <MudPaper Class="pa-4">


                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />

                        <MudTextField T="string" Label="Password"  @ref="pwField1"
                                      InputType="InputType.Password"
                                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                      RequiredError="Password is required!" />


                        <div class="d-flex align-center justify-space-between">

                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="ml-auto">Sign In</MudButton>
                        </div>
                    </MudForm>
                    <div class="text-center">
                        <p class="mb-2">
                            <a href="/forgotpass">Forgot password</a>
                        </p>
                        <p class="mb-0">Don't have an account? <a href="/registration">Sign Up</a></p>
                    </div>
                </MudPaper>

            </MudItem>

        </MudGrid>
    </div>
</div>



@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

}