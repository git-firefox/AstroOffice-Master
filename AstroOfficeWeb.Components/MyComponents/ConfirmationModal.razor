.Helper
@inject IJSRuntime JSRuntime

<div @ref="ER_ConfirmationModal" class="modal fade confirmation-modal" id="staticBackdrop" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>@Message</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">No</button>
                <button type="button" class="btn btn-custom" @onclick="() => OnConfirmationChange(true)">Yes</button>
            </div>
        </div>
    </div>
</div>


@code {
    protected bool IsShow { get; set; } = true;
    protected ElementReference ER_ConfirmationModal { get; set; }

    [Parameter]
    public string Title { get; set; } = "Confirmation ?";

    [Parameter]
    public string Message { get; set; } = "Are you sure you want to delete this?";

    public async Task ShowAsync()
    {
        IsShow = true;
        await JSRuntime.ShowModalAsync(ER_ConfirmationModal);
        StateHasChanged();
    }


    public async Task CloseAsync()
    {
        IsShow = false;
        await JSRuntime.CloseModalAsync(ER_ConfirmationModal);
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<bool> OnConfirmationChanged { get; set; }

    protected async Task OnConfirmationChange(bool value)
    {
        IsShow = false;
        await OnConfirmationChanged.InvokeAsync(value);
    }
}

