@attribute [Authorize]

@inherits BaseComponent
@inject TokenWalletService TokenWallet
@inject IJSRuntime JSRuntime

<div class="row row-cols-1 g-4">
    <div class="col">
        <EditForm class="card" Model="Token" OnInvalidSubmit="OnInvalidSubmit" OnValidSubmit="OnValidSubmit">
            <div class="card-header">
                <div class="d-flex">
                    <div class="flex-grow-1">
                        <h3 class="card-title">Add Token</h3>
                    </div>
                    @if (UserToken != null)
                    {
                        <h3 class="font-weight-bold"><span class="badge bg-primary">@UserToken</span></h3>
                    }
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label" for="inputToken">Token(s)</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fa fa-circle  "></i>
                            </span>
                            <input id="inputAmount" class="form-control" type="text" @bind="Token.TokenAmount" @bind:event="oninput" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label" for="inputAmount">Amount(s)</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fa fa-rupee-sign"></i>
                            </span>
                            <input id="inputToken" class="form-control" type="text" @bind="Token.TokenAmount" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="d-flex justify-content-between gap-2 mt-md-3 mt-1 overflow-auto">
                            <button class="btn btn-outline-custom mt-md-4" type="button" @onclick="()=> Token.TokenAmount += 100">100</button>
                            <button class="btn btn-outline-custom mt-md-4" type="button" @onclick="()=> Token.TokenAmount += 200">200</button>
                            <button class="btn btn-outline-custom mt-md-4" type="button" @onclick="()=> Token.TokenAmount += 500">500</button>
                            <button class="btn btn-outline-custom mt-md-4" type="button" @onclick="()=> Token.TokenAmount += 1000">1000</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer bg-transparent border-0">
                <div class="d-grid d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-custom">Top Up</button>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="col">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    Recharge Token Transactions
                </h3>
            </div>
            <div class="card-body">
                <div class="chart-table table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Sr No</th>
                                <th>Transaction Status</th>
                                <th>Payment Amount</th>
                                <th>Payment Date</th>
                                <th>Timestamp Created</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (TokenRechargeTableTRs == null)
                            {
                                @for (int i = 0; i < 10; i++)
                                {
                                    <tr>
                                        <td> <MudSkeleton /> </td>
                                        <td> <MudSkeleton /> </td>
                                        <td> <MudSkeleton /> </td>
                                        <td> <MudSkeleton /> </td>
                                        <td> <MudSkeleton /> </td>
                                    </tr>
                                }

                            }
                            else if (TokenRechargeTableTRs.Any())
                            {
                                foreach (var row in TokenRechargeTableTRs)
                                {
                                    <tr>
                                        <td>@row.SrNo</td>
                                        <td>@row.Status</td>
                                        <td>@row.PaymentAmount</td>
                                        <td>@row.PaymentDate</td>
                                        <td>@row.TimestampCreated</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="text-center">No transaction records.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public class TokenModel
    {
        public decimal TokenAmount { get; set; }
        public string? UserName { get; set; }
    }

    private TokenModel Token = new TokenModel();
    private decimal? UserToken;
    private List<TokenRechargeTableTRModel>? TokenRechargeTableTRs;

    protected override async Task OnInitializedAsync()
    {
        UserToken = await TokenWallet.GetBalance();
        TokenRechargeTableTRs = await TokenWallet.GetTokenRechargeTransactionHistory();
        await base.OnInitializedAsync();

        Token.UserName = UserName;
    }

    private void OnInvalidSubmit()
    {

    }
    private async void OnValidSubmit()
    {
        var minRechargeForBonusAmount = 1000;
        var bonusAmount = 150;
        var totalBalance = 0;
        if (Token.TokenAmount >= minRechargeForBonusAmount)
        {
            var AmountWithBonus = Token.TokenAmount + bonusAmount;
            var balance = await TokenWallet.UpdateRechargeTokenBalance(AstroOfficeWeb.Shared.Models.TransactionType.Deposit, AmountWithBonus, $"Congratulations! You got the bonus of {bonusAmount}. And your total recharge of {AmountWithBonus} successfully completed.");
            totalBalance = (int)balance;
        }
        else
        {
            var balance = await TokenWallet.UpdateRechargeTokenBalance(AstroOfficeWeb.Shared.Models.TransactionType.Deposit, Token.TokenAmount, $"Recharge of {Token.TokenAmount} successfully completed.");
            totalBalance = (int)balance;
        }

        TokenRechargeTableTRs = await TokenWallet.GetTokenRechargeTransactionHistory();
        // UserToken = balance;
        UserToken = totalBalance;
        StateHasChanged();
    }
}