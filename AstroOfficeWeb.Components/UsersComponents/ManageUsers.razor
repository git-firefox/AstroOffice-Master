@* @page "/users" *@
@using System.ComponentModel.DataAnnotations

@inject IDialogService Dialog
@inject AccountService Account

<MudButton Variant="Variant.Text" Class="btn-custom" OnClick="()=>OnClick_BtnAction(ActionMode.Add)">Add User</MudButton>
<MudDrawer @bind-Open="IsDrawerOpen" Width="375px" Height="100%" Anchor="Anchor.End" Elevation="1" Variant="DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudGrid>
            <MudItem xs="12">
                <MudStack Justify="Justify.SpaceBetween" Row="true">
                    <MudText Typo="Typo.h6">
                        @DrawerTitle
                    </MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" Size="Size.Small" OnClick="OnClick_BtnClose" />
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudDrawerHeader>
    <MudDrawerContainer>
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-4">
                    <MudForm @ref="Form" @bind-IsValid="@IsSaveUserFormValid">
                        <MudTextField T="string" @bind-Value="SaveUserModel.Username" Label="Username" Required="true" RequiredError="User name is required!"></MudTextField>
                        @* <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"></MudTextField> *@

                        @* <MudTextField T="string" @bind-Value="SaveUserModel.Password" Label="Password" HelperText="Choose a strong password" InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" RequiredError="Password is required!"></MudTextField> *@

                        @* <MudTextField T="string" @bind-Value="SaveUserModel.RetypePassword" Label="Repeat Password" HelperText="Repeat the password" InputType="InputType.Password" Validation="@(new Func<string, string?>(PasswordMatch))"></MudTextField> *@

                        <MudTextField T="string" @bind-Value="SaveUserModel.MobileNumber" Label="Mobile Number" HelperText="Repeat the MobileNumber"></MudTextField>

                        <MudCheckBox @bind-Value="SaveUserModel.CanAdd" Label="Can Add"></MudCheckBox>

                        <MudCheckBox @bind-Value="SaveUserModel.CanEdit" Label="Can Edit"></MudCheckBox>

                        <MudCheckBox @bind-Value="SaveUserModel.CanReport" Label="Can Report"></MudCheckBox>

                        <MudCheckBox @bind-Value="SaveUserModel.AdminUser" Label="Admin User ?"></MudCheckBox>

                        <MudSelect T="UserRole" @bind-Value="SaveUserModel.Role" Label="Role">
                            @foreach (UserRole option in Enum.GetValues(typeof(UserRole)))
                            {
                                <MudSelectItem Value="option">@option.ToDescriptionString()</MudSelectItem>
                            }
                        </MudSelect>

                        <MudSelect T="UserStatus" @bind-Value="SaveUserModel.Status" Label="Status">
                            @foreach (UserStatus option in Enum.GetValues(typeof(UserStatus)))
                            {
                                <MudSelectItem Value="option">@option.ToDescriptionString()</MudSelectItem>
                            }
                        </MudSelect>

                        <MudStack Justify="Justify.SpaceBetween" Row="true" Class="py-4">
                            <MudPaper Elevation="0"><MudButton ButtonType=ButtonType.Button Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="OnClick_BtnClose">Cancel</MudButton></MudPaper>
                            <MudPaper Elevation="0"><MudButton ButtonType=ButtonType.Button Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(()=>Form.ResetAsync())">Reset</MudButton></MudPaper>
                            @* <MudPaper Elevation="0"><MudButton ButtonType=ButtonType.Button Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(()=>Form.ResetValidation())">Reset</MudButton></MudPaper> *@
                            <MudPaper Elevation="0"><MudButton ButtonType=ButtonType.Button Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="OnClick_BtnSave" Disabled="@(!IsSaveUserFormValid)">Save</MudButton></MudPaper>
                        </MudStack>
                    </MudForm>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudDrawerContainer>
</MudDrawer>

@if (Users == null)
{
    <div class="table-responsive">
        <table class="table table-centered table-nowrap">
            <thead>
                <tr>

                    <th scope="col">Sr No</th>
                    <th scope="col">User Name</th>
                    <th scope="col">Role</th>
                    <th scope="col">Mobile Number</th>
                    <th scope="col">Status</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 1; i <= 10; i++)
                {
                    <tr>
                        <td><MudSkeleton /></td>
                        <td><MudSkeleton /></td>
                        <td><MudSkeleton /></td>
                        <td><MudSkeleton /></td>
                        <td><MudSkeleton /></td>
                        <td><MudSkeleton /></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (Users.Any())
{
    <MudDataGrid T=UserListItemModel Items=Users Filterable="true" FilterMode="DataGridFilterMode.ColumnFilterRow" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <PropertyColumn Property="x => x.Sno" Title="Sr No" Filterable="false" Sortable="false" />
            <PropertyColumn Property="x => x.Username" Title="User Name" />
            <PropertyColumn Property="x => x.Role.ToDescriptionString()" Title="Role" />
            <PropertyColumn Property="x => x.MobileNumber" Title="Mobile Number" />
            <PropertyColumn Property="x => x.Status.ToDescriptionString()" Title="Status" />
            <TemplateColumn CellClass="d-flex justify-end" Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudStack Row=true>
                        <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" aria-label="View user info" OnClick="()=>OnClick_BtnAction(ActionMode.View, context.Item )" />
                        <MudIconButton Icon="@Icons.Material.Filled.ModeEdit" aria-label="Edit user info" OnClick="()=>OnClick_BtnAction(ActionMode.Edit, context.Item )" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="Delete user" OnClick="()=>OnClick_BtnAction(ActionMode.Delete, context.Item)" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="UserListItemModel" />
        </PagerContent>
    </MudDataGrid>
}