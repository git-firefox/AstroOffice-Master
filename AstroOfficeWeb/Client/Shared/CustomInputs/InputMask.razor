@typeparam IType
@inherits InputText
@inject IJSRuntime JSRuntime

<input @ref="ER_InputText" @attributes="AdditionalAttributes" type="text" @bind="CurrentValue" />

@code {
    [Parameter]
    public string Placeholder { get; set; } = "_";

    [Parameter]
    public string Mask { get; set; } = null!;

    private ElementReference ER_InputText { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("InputMaskInterop.fnInitialize", ER_InputText, Mask, Placeholder = "_");
            await JSRuntime.InvokeVoidAsync("InputMaskInterop.fnAddChangeEvent", ER_InputText, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnInputMaskChange(object value)
    {
        CurrentValue = value.ToDigits();
        StateHasChanged();
    }
}
