@using System.Timers;
@inherits BaseComponent
@inject IJSRuntime JSRuntime

<div @ref="ER_MobileOtpModal" class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">

                @*   @if (!IsForgotPassword) { *@

                <div class="container-fluid ">
                    <div class="row justify-content-center">
                        <div class="col-12 col-md-6 col-lg-4" style="min-width: 500px;">
                            <div>
                                <div class=" text-center">

                                    <h4>Verify</h4>

                                    <p>Your code was sent to you via mobile number OTP</p>


                                    <div class="otp-field mb-4">
                                        <input type="text" data-inputmask='"mask": "9"' data-mask />
                                        <input type="text" data-inputmask='"mask": "9"' data-mask disabled />
                                        <input type="text" data-inputmask='"mask": "9"' data-mask disabled />
                                        <input type="text" data-inputmask='"mask": "9"' data-mask disabled />
                                        <input type="text" data-inputmask='"mask": "9"' data-mask disabled />
                                        <input type="text" data-inputmask='"mask": "9"' data-mask disabled />
                                    </div>




                                    <p> OTP valid till: @timeLeft seconds</p>

                                    <button type="button" class="btn btn-primary mb-3" data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">
                                        Close
                                    </button>
                                    <button type="button" class="btn btn-primary mb-3" @onclick="() => OnConfirmationChange(true)">
                                        Verify
                                    </button>


                                    <p class="resend text-muted mb-0">
                                        Didn't receive code? <a href="">Request again</a>
                                    </p>

                                    @if (!string.IsNullOrEmpty(ErrorMessage))
                                    {
                                        <p class="text-danger">@ErrorMessage</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*    }
                else
                {
                <form>
                <div class="form-group">
                <label for="userNameId">User Name</label>
                <input type="email" class="form-control" id="userNameId" aria-describedby="emailHelp">
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
                </div>
                <div class="form-group">
                <label for="exampleInputPassword1">Password</label>
                <input type="password" class="form-control" id="exampleInputPassword1">
                </div>
                <div class="form-group form-check">
                <input type="checkbox" class="form-check-input" id="exampleCheck1">
                <label class="form-check-label" for="exampleCheck1">Check me out</label>
                </div>
                <button type="button" class="btn btn-primary" @onclick="() => OnConfirmationChange(true)">Confirm</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Close</button>
                </form>
                } *@
            </div>
        </div>
    </div>
</div>


@code {
    protected bool IsShow { get; set; } = true;
    protected ElementReference ER_MobileOtpModal { get; set; }

    [Parameter]
    public string Title { get; set; } = "Verify OTP";

    [Parameter]
    public bool IsForgotPassword { get; set; } = false;

    [Parameter]
    public string? ErrorMessage { get; set; }
    
    private int totalTime = 120; // 2 minutes in seconds
    private int timeLeft;

    private int minutes => timeLeft / 60;
    private int seconds => timeLeft % 60;

    private Timer timer;


    public async Task ShowAsync()
    {

        if (timer != null)
        {
            // If a timer is already running, stop and dispose of it
            timer.Stop();
            timer.Dispose();
        }

        IsShow = true;
        await JSRuntime.ShowOtpModalAsync(ER_MobileOtpModal);

        timeLeft = 120;
        timer = new Timer(1000); // Interval in milliseconds (1 second)
        timer.Elapsed += TimerElapsed;
        timer.Start();

        StateHasChanged();
    }


    public async Task CloseAsync()
    {
        IsShow = false;
        await JSRuntime.CloseModalAsync(ER_MobileOtpModal);
        StateHasChanged();
    }

    public async Task<object> GetOtpValue()
    {
        object obj = await JSRuntime.GetOtpValueAsync(ER_MobileOtpModal);
        return obj;
    }

    public async Task ShowForgotPasswordAsync()
    {
        IsShow = true;
        await JSRuntime.ShowModalAsync(ER_MobileOtpModal);
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<bool> ConfirmationChanged { get; set; }

    protected async Task OnConfirmationChange(bool value)
    {
        IsShow = false;
        await ConfirmationChanged.InvokeAsync(value);
    }


    private void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (timeLeft > 0)
        {
            timeLeft--;
            StateHasChanged();
        }
        else
        {
            timer.Stop();
            IsShow = false; // Hide the modal when the countdown is complete
            timer.Dispose(); // Dispose of the timer
        }
    }
    public void Dispose()
    {
        // Ensure the timer is disposed when the component is disposed
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();
        }
    }
}
